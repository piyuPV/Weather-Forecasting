# -*- coding: utf-8 -*-
"""Weather Forecasting-Copy1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oK9lruRi94DEn4zQ_7-s7V9XYvBKbAQo
"""

#importing dataset in colab
# from google.colab import files
# uploaded = files.upload()

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from matplotlib import pyplot as plt
import seaborn as sns

from sklearn.metrics import accuracy_score

df = pd.read_csv('seattle-weather.csv')

df

df.isnull()

df.describe()

df.isnull().sum()

df = df.drop("date", axis='columns') #cleaning data

df

from sklearn.ensemble import RandomForestClassifier  
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

df = df.drop('weather', axis ='columns')

x = df.iloc[:,[0,1,2,3]].values

x

# Using wcss
wcss = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i,init = 'k-means++', random_state = 0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)

#plot elbow graph

sns.set()
plt.plot(range(1,11), wcss)
plt.title('Elbow point graph')
plt.xlabel('No. of clusters')
plt.ylabel('WCSS')
plt.show()

#Optimum no. of cluster is 4

kmeans = KMeans(n_clusters = 5,init = 'k-means++', random_state = 0)

y = kmeans.fit_predict(x)

print(y)

#scater plot
#visualiszing ploting
plt.figure(figsize = (8,8))
plt.scatter(x[y == 0,0], x[y == 0,1], s = 50, c= 'yellow', label ='C1')
plt.scatter(x[y == 1,0], x[y == 1,1], s = 50, c= 'blue', label ='C2')
plt.scatter(x[y == 0,0], x[y == 0,2], s = 50, c= 'red', label ='C3')
plt.scatter(x[y == 2,0], x[y == 2,2], s = 50, c= 'pink', label ='C4')


plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s= 100, c='green', label ='Centroid')
plt.show()

from sklearn.ensemble import RandomForestClassifier  
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")

precipitation = 15.2
temp_max =-1.1
temp_min= -2.8
wind = 1.6

# 0	19.4	9.4	3.5
#inputs

classifier.fit(x,y)

ypred= classifier.predict(x)
ypred

accuracy_score(y,ypred) #accuracy%

input = [[precipitation,temp_max,temp_min,wind]] #fiting input

def pred(input):
    pred=classifier.predict(input)
    if pred == 1:
      print('It Will Be Sunny Day')
    elif pred == 2:
      print('It will be Drizzle today ')
    elif pred == 4:
      print('It will be  Snow Today ')
    else:
      print('Its a Rainy Day')

pred(input)



